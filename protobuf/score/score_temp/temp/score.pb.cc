// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: temp/score.proto

#include "temp/score.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_temp_2fscore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scores_temp_2fscore_2eproto;
namespace antpath {
namespace predictor {
class ScoresDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scores> _instance;
} _Scores_default_instance_;
class ItemRankScoreDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ItemRankScore> _instance;
} _ItemRankScore_default_instance_;
}  // namespace predictor
}  // namespace antpath
static void InitDefaultsscc_info_ItemRankScore_temp_2fscore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::antpath::predictor::_ItemRankScore_default_instance_;
    new (ptr) ::antpath::predictor::ItemRankScore();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::antpath::predictor::ItemRankScore::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ItemRankScore_temp_2fscore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ItemRankScore_temp_2fscore_2eproto}, {
      &scc_info_Scores_temp_2fscore_2eproto.base,}};

static void InitDefaultsscc_info_Scores_temp_2fscore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::antpath::predictor::_Scores_default_instance_;
    new (ptr) ::antpath::predictor::Scores();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::antpath::predictor::Scores::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scores_temp_2fscore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Scores_temp_2fscore_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_temp_2fscore_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_temp_2fscore_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_temp_2fscore_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_temp_2fscore_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antpath::predictor::Scores, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::antpath::predictor::Scores, embedx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antpath::predictor::ItemRankScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::antpath::predictor::ItemRankScore, item_id_),
  PROTOBUF_FIELD_OFFSET(::antpath::predictor::ItemRankScore, rank_score_),
  PROTOBUF_FIELD_OFFSET(::antpath::predictor::ItemRankScore, uniq_id_),
  PROTOBUF_FIELD_OFFSET(::antpath::predictor::ItemRankScore, mlt_rank_scores_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::antpath::predictor::Scores)},
  { 6, -1, sizeof(::antpath::predictor::ItemRankScore)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antpath::predictor::_Scores_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antpath::predictor::_ItemRankScore_default_instance_),
};

const char descriptor_table_protodef_temp_2fscore_2eproto[] =
  "\n\020temp/score.proto\022\021antpath.predictor\"\030\n"
  "\006Scores\022\016\n\006embedx\030\001 \003(\002\"y\n\rItemRankScore"
  "\022\017\n\007item_id\030\001 \001(\t\022\022\n\nrank_score\030\002 \003(\002\022\017\n"
  "\007uniq_id\030\003 \001(\004\0222\n\017mlt_rank_scores\030\004 \003(\0132"
  "\031.antpath.predictor.ScoresB&Z$git.woa.co"
  "m/comp_video/proto/rankingb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_temp_2fscore_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_temp_2fscore_2eproto_sccs[2] = {
  &scc_info_ItemRankScore_temp_2fscore_2eproto.base,
  &scc_info_Scores_temp_2fscore_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_temp_2fscore_2eproto_once;
static bool descriptor_table_temp_2fscore_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_temp_2fscore_2eproto = {
  &descriptor_table_temp_2fscore_2eproto_initialized, descriptor_table_protodef_temp_2fscore_2eproto, "temp/score.proto", 234,
  &descriptor_table_temp_2fscore_2eproto_once, descriptor_table_temp_2fscore_2eproto_sccs, descriptor_table_temp_2fscore_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_temp_2fscore_2eproto::offsets,
  file_level_metadata_temp_2fscore_2eproto, 2, file_level_enum_descriptors_temp_2fscore_2eproto, file_level_service_descriptors_temp_2fscore_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_temp_2fscore_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_temp_2fscore_2eproto), true);
namespace antpath {
namespace predictor {

// ===================================================================

void Scores::InitAsDefaultInstance() {
}
class Scores::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scores::kEmbedxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scores::Scores()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:antpath.predictor.Scores)
}
Scores::Scores(const Scores& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      embedx_(from.embedx_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:antpath.predictor.Scores)
}

void Scores::SharedCtor() {
}

Scores::~Scores() {
  // @@protoc_insertion_point(destructor:antpath.predictor.Scores)
  SharedDtor();
}

void Scores::SharedDtor() {
}

void Scores::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scores& Scores::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scores_temp_2fscore_2eproto.base);
  return *internal_default_instance();
}


void Scores::Clear() {
// @@protoc_insertion_point(message_clear_start:antpath.predictor.Scores)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  embedx_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Scores::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float embedx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_embedx(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_embedx(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Scores::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:antpath.predictor.Scores)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float embedx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_embedx())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_embedx())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:antpath.predictor.Scores)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:antpath.predictor.Scores)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Scores::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:antpath.predictor.Scores)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float embedx = 1;
  if (this->embedx_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_embedx_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->embedx().data(), this->embedx_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:antpath.predictor.Scores)
}

::PROTOBUF_NAMESPACE_ID::uint8* Scores::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:antpath.predictor.Scores)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float embedx = 1;
  if (this->embedx_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _embedx_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->embedx_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antpath.predictor.Scores)
  return target;
}

size_t Scores::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antpath.predictor.Scores)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float embedx = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->embedx_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _embedx_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scores::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:antpath.predictor.Scores)
  GOOGLE_DCHECK_NE(&from, this);
  const Scores* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scores>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:antpath.predictor.Scores)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:antpath.predictor.Scores)
    MergeFrom(*source);
  }
}

void Scores::MergeFrom(const Scores& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antpath.predictor.Scores)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  embedx_.MergeFrom(from.embedx_);
}

void Scores::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:antpath.predictor.Scores)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scores::CopyFrom(const Scores& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antpath.predictor.Scores)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scores::IsInitialized() const {
  return true;
}

void Scores::Swap(Scores* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scores::InternalSwap(Scores* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  embedx_.InternalSwap(&other->embedx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scores::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ItemRankScore::InitAsDefaultInstance() {
}
class ItemRankScore::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ItemRankScore::kItemIdFieldNumber;
const int ItemRankScore::kRankScoreFieldNumber;
const int ItemRankScore::kUniqIdFieldNumber;
const int ItemRankScore::kMltRankScoresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ItemRankScore::ItemRankScore()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:antpath.predictor.ItemRankScore)
}
ItemRankScore::ItemRankScore(const ItemRankScore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      rank_score_(from.rank_score_),
      mlt_rank_scores_(from.mlt_rank_scores_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.item_id().size() > 0) {
    item_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.item_id_);
  }
  uniq_id_ = from.uniq_id_;
  // @@protoc_insertion_point(copy_constructor:antpath.predictor.ItemRankScore)
}

void ItemRankScore::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ItemRankScore_temp_2fscore_2eproto.base);
  item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uniq_id_ = PROTOBUF_ULONGLONG(0);
}

ItemRankScore::~ItemRankScore() {
  // @@protoc_insertion_point(destructor:antpath.predictor.ItemRankScore)
  SharedDtor();
}

void ItemRankScore::SharedDtor() {
  item_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ItemRankScore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ItemRankScore& ItemRankScore::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ItemRankScore_temp_2fscore_2eproto.base);
  return *internal_default_instance();
}


void ItemRankScore::Clear() {
// @@protoc_insertion_point(message_clear_start:antpath.predictor.ItemRankScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rank_score_.Clear();
  mlt_rank_scores_.Clear();
  item_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uniq_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ItemRankScore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_item_id(), ptr, ctx, "antpath.predictor.ItemRankScore.item_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float rank_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_rank_score(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_rank_score(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 uniq_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uniq_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .antpath.predictor.Scores mlt_rank_scores = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_mlt_rank_scores(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ItemRankScore::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:antpath.predictor.ItemRankScore)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string item_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_item_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->item_id().data(), static_cast<int>(this->item_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "antpath.predictor.ItemRankScore.item_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float rank_score = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_rank_score())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_rank_score())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 uniq_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uniq_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .antpath.predictor.Scores mlt_rank_scores = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_mlt_rank_scores()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:antpath.predictor.ItemRankScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:antpath.predictor.ItemRankScore)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ItemRankScore::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:antpath.predictor.ItemRankScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string item_id = 1;
  if (this->item_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->item_id().data(), static_cast<int>(this->item_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "antpath.predictor.ItemRankScore.item_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->item_id(), output);
  }

  // repeated float rank_score = 2;
  if (this->rank_score_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_rank_score_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->rank_score().data(), this->rank_score_size(), output);
  }

  // uint64 uniq_id = 3;
  if (this->uniq_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->uniq_id(), output);
  }

  // repeated .antpath.predictor.Scores mlt_rank_scores = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mlt_rank_scores_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->mlt_rank_scores(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:antpath.predictor.ItemRankScore)
}

::PROTOBUF_NAMESPACE_ID::uint8* ItemRankScore::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:antpath.predictor.ItemRankScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string item_id = 1;
  if (this->item_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->item_id().data(), static_cast<int>(this->item_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "antpath.predictor.ItemRankScore.item_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->item_id(), target);
  }

  // repeated float rank_score = 2;
  if (this->rank_score_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _rank_score_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->rank_score_, target);
  }

  // uint64 uniq_id = 3;
  if (this->uniq_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->uniq_id(), target);
  }

  // repeated .antpath.predictor.Scores mlt_rank_scores = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mlt_rank_scores_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->mlt_rank_scores(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antpath.predictor.ItemRankScore)
  return target;
}

size_t ItemRankScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antpath.predictor.ItemRankScore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float rank_score = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->rank_score_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rank_score_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .antpath.predictor.Scores mlt_rank_scores = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->mlt_rank_scores_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->mlt_rank_scores(static_cast<int>(i)));
    }
  }

  // string item_id = 1;
  if (this->item_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->item_id());
  }

  // uint64 uniq_id = 3;
  if (this->uniq_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->uniq_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ItemRankScore::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:antpath.predictor.ItemRankScore)
  GOOGLE_DCHECK_NE(&from, this);
  const ItemRankScore* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ItemRankScore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:antpath.predictor.ItemRankScore)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:antpath.predictor.ItemRankScore)
    MergeFrom(*source);
  }
}

void ItemRankScore::MergeFrom(const ItemRankScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antpath.predictor.ItemRankScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rank_score_.MergeFrom(from.rank_score_);
  mlt_rank_scores_.MergeFrom(from.mlt_rank_scores_);
  if (from.item_id().size() > 0) {

    item_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.item_id_);
  }
  if (from.uniq_id() != 0) {
    set_uniq_id(from.uniq_id());
  }
}

void ItemRankScore::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:antpath.predictor.ItemRankScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemRankScore::CopyFrom(const ItemRankScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antpath.predictor.ItemRankScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemRankScore::IsInitialized() const {
  return true;
}

void ItemRankScore::Swap(ItemRankScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ItemRankScore::InternalSwap(ItemRankScore* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rank_score_.InternalSwap(&other->rank_score_);
  CastToBase(&mlt_rank_scores_)->InternalSwap(CastToBase(&other->mlt_rank_scores_));
  item_id_.Swap(&other->item_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uniq_id_, other->uniq_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemRankScore::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace predictor
}  // namespace antpath
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::antpath::predictor::Scores* Arena::CreateMaybeMessage< ::antpath::predictor::Scores >(Arena* arena) {
  return Arena::CreateInternal< ::antpath::predictor::Scores >(arena);
}
template<> PROTOBUF_NOINLINE ::antpath::predictor::ItemRankScore* Arena::CreateMaybeMessage< ::antpath::predictor::ItemRankScore >(Arena* arena) {
  return Arena::CreateInternal< ::antpath::predictor::ItemRankScore >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
