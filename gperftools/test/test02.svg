<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.30.1 (20150306.0020)
 -->
<!-- Title: ./test02; 4 objects Pages: 1 -->
<svg width="100%" height="100%"
  xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<script type="text/ecmascript"><![CDATA[
// SVGPan
// http://www.cyberz.org/blog/2009/12/08/svgpan-a-javascript-svg-panzoomdrag-library/
// Local modification: if(true || ...) below to force panning, never moving.

/**
 *  SVGPan library 1.2
 * ====================
 *
 * Given an unique existing element with id "viewport", including the
 * the library into any SVG adds the following capabilities:
 *
 *  - Mouse panning
 *  - Mouse zooming (using the wheel)
 *  - Object dargging
 *
 * Known issues:
 *
 *  - Zooming (while panning) on Safari has still some issues
 *
 * Releases:
 *
 * 1.2, Sat Mar 20 08:42:50 GMT 2010, Zeng Xiaohui
 *	Fixed a bug with browser mouse handler interaction
 *
 * 1.1, Wed Feb  3 17:39:33 GMT 2010, Zeng Xiaohui
 *	Updated the zoom code to support the mouse wheel on Safari/Chrome
 *
 * 1.0, Andrea Leofreddi
 *	First release
 *
 * This code is licensed under the following BSD license:
 *
 * Copyright 2009-2010 Andrea Leofreddi <a.leofreddi@itcharm.com>. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *    1. Redistributions of source code must retain the above copyright notice, this list of
 *       conditions and the following disclaimer.
 *
 *    2. Redistributions in binary form must reproduce the above copyright notice, this list
 *       of conditions and the following disclaimer in the documentation and/or other materials
 *       provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY Andrea Leofreddi ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Andrea Leofreddi OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are those of the
 * authors and should not be interpreted as representing official policies, either expressed
 * or implied, of Andrea Leofreddi.
 */

var root = document.documentElement;

var state = 'none', stateTarget, stateOrigin, stateTf;

setupHandlers(root);

/**
 * Register handlers
 */
function setupHandlers(root){
	setAttributes(root, {
		"onmouseup" : "add(evt)",
		"onmousedown" : "handleMouseDown(evt)",
		"onmousemove" : "handleMouseMove(evt)",
		"onmouseup" : "handleMouseUp(evt)",
		//"onmouseout" : "handleMouseUp(evt)", // Decomment this to stop the pan functionality when dragging out of the SVG element
	});

	if(navigator.userAgent.toLowerCase().indexOf('webkit') >= 0)
		window.addEventListener('mousewheel', handleMouseWheel, false); // Chrome/Safari
	else
		window.addEventListener('DOMMouseScroll', handleMouseWheel, false); // Others

	var g = svgDoc.getElementById("svg");
	g.width = "100%";
	g.height = "100%";
}

/**
 * Instance an SVGPoint object with given event coordinates.
 */
function getEventPoint(evt) {
	var p = root.createSVGPoint();

	p.x = evt.clientX;
	p.y = evt.clientY;

	return p;
}

/**
 * Sets the current transform matrix of an element.
 */
function setCTM(element, matrix) {
	var s = "matrix(" + matrix.a + "," + matrix.b + "," + matrix.c + "," + matrix.d + "," + matrix.e + "," + matrix.f + ")";

	element.setAttribute("transform", s);
}

/**
 * Dumps a matrix to a string (useful for debug).
 */
function dumpMatrix(matrix) {
	var s = "[ " + matrix.a + ", " + matrix.c + ", " + matrix.e + "\n  " + matrix.b + ", " + matrix.d + ", " + matrix.f + "\n  0, 0, 1 ]";

	return s;
}

/**
 * Sets attributes of an element.
 */
function setAttributes(element, attributes){
	for (i in attributes)
		element.setAttributeNS(null, i, attributes[i]);
}

/**
 * Handle mouse move event.
 */
function handleMouseWheel(evt) {
	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	var delta;

	if(evt.wheelDelta)
		delta = evt.wheelDelta / 3600; // Chrome/Safari
	else
		delta = evt.detail / -90; // Mozilla

	var z = 1 + delta; // Zoom factor: 0.9/1.1

	var g = svgDoc.getElementById("viewport");

	var p = getEventPoint(evt);

	p = p.matrixTransform(g.getCTM().inverse());

	// Compute new scale matrix in current mouse position
	var k = root.createSVGMatrix().translate(p.x, p.y).scale(z).translate(-p.x, -p.y);

        setCTM(g, g.getCTM().multiply(k));

	stateTf = stateTf.multiply(k.inverse());
}

/**
 * Handle mouse move event.
 */
function handleMouseMove(evt) {
	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	var g = svgDoc.getElementById("viewport");

	if(state == 'pan') {
		// Pan mode
		var p = getEventPoint(evt).matrixTransform(stateTf);

		setCTM(g, stateTf.inverse().translate(p.x - stateOrigin.x, p.y - stateOrigin.y));
	} else if(state == 'move') {
		// Move mode
		var p = getEventPoint(evt).matrixTransform(g.getCTM().inverse());

		setCTM(stateTarget, root.createSVGMatrix().translate(p.x - stateOrigin.x, p.y - stateOrigin.y).multiply(g.getCTM().inverse()).multiply(stateTarget.getCTM()));

		stateOrigin = p;
	}
}

/**
 * Handle click event.
 */
function handleMouseDown(evt) {
	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	var g = svgDoc.getElementById("viewport");

	if(true || evt.target.tagName == "svg") {
		// Pan mode
		state = 'pan';

		stateTf = g.getCTM().inverse();

		stateOrigin = getEventPoint(evt).matrixTransform(stateTf);
	} else {
		// Move mode
		state = 'move';

		stateTarget = evt.target;

		stateTf = g.getCTM().inverse();

		stateOrigin = getEventPoint(evt).matrixTransform(stateTf);
	}
}

/**
 * Handle mouse button release event.
 */
function handleMouseUp(evt) {
	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	if(state == 'pan' || state == 'move') {
		// Quit pan mode
		state = '';
	}
}

]]></script>
<g id="viewport" transform="translate(0,0)">
<g id="viewport" class="graph" transform="scale(1 1) rotate(0) translate(4 586)">
<title>./test02; 4 objects</title>
<polygon fill="white" stroke="white" points="-4,5 -4,-586 1165,-586 1165,5 -4,5"/>
<!-- Legend -->
<g id="node1" class="node"><title>Legend</title>
<text text-anchor="start" x="155.5" y="-558.8" font-family="Times,serif" font-size="24.00">./test02</text>
<text text-anchor="start" x="155.5" y="-532.8" font-family="Times,serif" font-size="24.00">Total objects: 4</text>
<text text-anchor="start" x="155.5" y="-506.8" font-family="Times,serif" font-size="24.00">Focusing on: 4</text>
<text text-anchor="start" x="155.5" y="-480.8" font-family="Times,serif" font-size="24.00">Dropped nodes with &lt;= 0 abs(objects)</text>
<text text-anchor="start" x="155.5" y="-454.8" font-family="Times,serif" font-size="24.00">Dropped edges with &lt;= 0 objects</text>
</g>
<!-- N1 -->
<g id="node2" class="node"><title>N1</title>
<polygon fill="none" stroke="black" points="617,-392 543,-392 543,-348 617,-348 617,-392"/>
<text text-anchor="middle" x="580" y="-381.6" font-family="Times,serif" font-size="8.00">__libc_start_main</text>
<text text-anchor="middle" x="580" y="-372.6" font-family="Times,serif" font-size="8.00">??:0</text>
<text text-anchor="end" x="609" y="-363.6" font-family="Times,serif" font-size="8.00">0 (0.0%)</text>
<text text-anchor="end" x="609" y="-354.6" font-family="Times,serif" font-size="8.00">of 4 (100.0%)</text>
</g>
<!-- N4 -->
<g id="node5" class="node"><title>N4</title>
<polygon fill="none" stroke="black" points="668,-296 492,-296 492,-252 668,-252 668,-296"/>
<text text-anchor="middle" x="580" y="-285.6" font-family="Times,serif" font-size="8.00">main</text>
<text text-anchor="middle" x="580" y="-276.6" font-family="Times,serif" font-size="8.00">/root/github/tempwork/gperftools/test/test02.cc:19</text>
<text text-anchor="end" x="660" y="-267.6" font-family="Times,serif" font-size="8.00">0 (0.0%)</text>
<text text-anchor="end" x="660" y="-258.6" font-family="Times,serif" font-size="8.00">of 4 (100.0%)</text>
</g>
<!-- N1&#45;&gt;N4 -->
<g id="edge1" class="edge"><title>N1&#45;&gt;N4</title>
<path fill="none" stroke="black" stroke-width="2" d="M580,-347.67C580,-335.531 580,-320.097 580,-306.578"/>
<polygon fill="black" stroke="black" points="583.5,-306.246 580,-296.246 576.5,-306.246 583.5,-306.246"/>
<text text-anchor="middle" x="583.5" y="-318.3" font-family="Times,serif" font-size="14.00">4</text>
</g>
<!-- N2 -->
<g id="node3" class="node"><title>N2</title>
<polygon fill="none" stroke="black" points="611,-535 549,-535 549,-491 611,-491 611,-535"/>
<text text-anchor="middle" x="580" y="-524.6" font-family="Times,serif" font-size="8.00">_start</text>
<text text-anchor="middle" x="580" y="-515.6" font-family="Times,serif" font-size="8.00">??:0</text>
<text text-anchor="end" x="603" y="-506.6" font-family="Times,serif" font-size="8.00">0 (0.0%)</text>
<text text-anchor="end" x="603" y="-497.6" font-family="Times,serif" font-size="8.00">of 4 (100.0%)</text>
</g>
<!-- N2&#45;&gt;N1 -->
<g id="edge3" class="edge"><title>N2&#45;&gt;N1</title>
<path fill="none" stroke="black" stroke-width="2" d="M580,-490.891C580,-467.425 580,-429.286 580,-402.335"/>
<polygon fill="black" stroke="black" points="583.5,-402.253 580,-392.253 576.5,-402.253 583.5,-402.253"/>
<text text-anchor="middle" x="583.5" y="-414.3" font-family="Times,serif" font-size="14.00">4</text>
</g>
<!-- N3 -->
<g id="node4" class="node"><title>N3</title>
<polygon fill="none" stroke="black" points="1160,-200 0,-200 0,-0 1160,-0 1160,-200"/>
<text text-anchor="middle" x="580" y="-149.6" font-family="Times,serif" font-size="58.00">create</text>
<text text-anchor="middle" x="580" y="-85.6" font-family="Times,serif" font-size="58.00">/root/github/tempwork/gperftools/test/test02.cc:5</text>
<text text-anchor="end" x="1152" y="-21.6" font-family="Times,serif" font-size="58.00">4 (100.0%)</text>
</g>
<!-- N4&#45;&gt;N3 -->
<g id="edge2" class="edge"><title>N4&#45;&gt;N3</title>
<path fill="none" stroke="black" stroke-width="2" d="M580,-251.909C580,-240.692 580,-225.952 580,-210.08"/>
<polygon fill="black" stroke="black" points="583.5,-210.072 580,-200.072 576.5,-210.072 583.5,-210.072"/>
<text text-anchor="middle" x="583.5" y="-222.3" font-family="Times,serif" font-size="14.00">4</text>
</g>
</g>
</g></svg>
