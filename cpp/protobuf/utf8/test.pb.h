// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace utf8 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_test_2eproto();
void protobuf_AssignDesc_test_2eproto();
void protobuf_ShutdownFile_test_2eproto();

class test;

// ===================================================================

class test : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:utf8.test) */ {
 public:
  test();
  virtual ~test();

  test(const test& from);

  inline test& operator=(const test& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const test& default_instance();

  void Swap(test* other);

  // implements Message ----------------------------------------------

  inline test* New() const { return New(NULL); }

  test* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const test& from);
  void MergeFrom(const test& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(test* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string s1 = 1;
  void clear_s1();
  static const int kS1FieldNumber = 1;
  const ::std::string& s1() const;
  void set_s1(const ::std::string& value);
  void set_s1(const char* value);
  void set_s1(const char* value, size_t size);
  ::std::string* mutable_s1();
  ::std::string* release_s1();
  void set_allocated_s1(::std::string* s1);

  // optional string s2 = 2;
  void clear_s2();
  static const int kS2FieldNumber = 2;
  const ::std::string& s2() const;
  void set_s2(const ::std::string& value);
  void set_s2(const char* value);
  void set_s2(const char* value, size_t size);
  ::std::string* mutable_s2();
  ::std::string* release_s2();
  void set_allocated_s2(::std::string* s2);

  // optional bytes s3 = 3;
  void clear_s3();
  static const int kS3FieldNumber = 3;
  const ::std::string& s3() const;
  void set_s3(const ::std::string& value);
  void set_s3(const char* value);
  void set_s3(const void* value, size_t size);
  ::std::string* mutable_s3();
  ::std::string* release_s3();
  void set_allocated_s3(::std::string* s3);

  // @@protoc_insertion_point(class_scope:utf8.test)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr s1_;
  ::google::protobuf::internal::ArenaStringPtr s2_;
  ::google::protobuf::internal::ArenaStringPtr s3_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static test* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// test

// optional string s1 = 1;
inline void test::clear_s1() {
  s1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& test::s1() const {
  // @@protoc_insertion_point(field_get:utf8.test.s1)
  return s1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void test::set_s1(const ::std::string& value) {
  
  s1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:utf8.test.s1)
}
inline void test::set_s1(const char* value) {
  
  s1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:utf8.test.s1)
}
inline void test::set_s1(const char* value, size_t size) {
  
  s1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:utf8.test.s1)
}
inline ::std::string* test::mutable_s1() {
  
  // @@protoc_insertion_point(field_mutable:utf8.test.s1)
  return s1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* test::release_s1() {
  // @@protoc_insertion_point(field_release:utf8.test.s1)
  
  return s1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void test::set_allocated_s1(::std::string* s1) {
  if (s1 != NULL) {
    
  } else {
    
  }
  s1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), s1);
  // @@protoc_insertion_point(field_set_allocated:utf8.test.s1)
}

// optional string s2 = 2;
inline void test::clear_s2() {
  s2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& test::s2() const {
  // @@protoc_insertion_point(field_get:utf8.test.s2)
  return s2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void test::set_s2(const ::std::string& value) {
  
  s2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:utf8.test.s2)
}
inline void test::set_s2(const char* value) {
  
  s2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:utf8.test.s2)
}
inline void test::set_s2(const char* value, size_t size) {
  
  s2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:utf8.test.s2)
}
inline ::std::string* test::mutable_s2() {
  
  // @@protoc_insertion_point(field_mutable:utf8.test.s2)
  return s2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* test::release_s2() {
  // @@protoc_insertion_point(field_release:utf8.test.s2)
  
  return s2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void test::set_allocated_s2(::std::string* s2) {
  if (s2 != NULL) {
    
  } else {
    
  }
  s2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), s2);
  // @@protoc_insertion_point(field_set_allocated:utf8.test.s2)
}

// optional bytes s3 = 3;
inline void test::clear_s3() {
  s3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& test::s3() const {
  // @@protoc_insertion_point(field_get:utf8.test.s3)
  return s3_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void test::set_s3(const ::std::string& value) {
  
  s3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:utf8.test.s3)
}
inline void test::set_s3(const char* value) {
  
  s3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:utf8.test.s3)
}
inline void test::set_s3(const void* value, size_t size) {
  
  s3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:utf8.test.s3)
}
inline ::std::string* test::mutable_s3() {
  
  // @@protoc_insertion_point(field_mutable:utf8.test.s3)
  return s3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* test::release_s3() {
  // @@protoc_insertion_point(field_release:utf8.test.s3)
  
  return s3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void test::set_allocated_s3(::std::string* s3) {
  if (s3 != NULL) {
    
  } else {
    
  }
  s3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), s3);
  // @@protoc_insertion_point(field_set_allocated:utf8.test.s3)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace utf8

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
