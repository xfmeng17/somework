// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FooGroup.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FooGroup_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FooGroup_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FooGroup_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FooGroup_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FooGroup_2eproto;
namespace tutorial {
class Feature;
class FeatureDefaultTypeInternal;
extern FeatureDefaultTypeInternal _Feature_default_instance_;
class FooGroup;
class FooGroupDefaultTypeInternal;
extern FooGroupDefaultTypeInternal _FooGroup_default_instance_;
}  // namespace tutorial
PROTOBUF_NAMESPACE_OPEN
template<> ::tutorial::Feature* Arena::CreateMaybeMessage<::tutorial::Feature>(Arena*);
template<> ::tutorial::FooGroup* Arena::CreateMaybeMessage<::tutorial::FooGroup>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tutorial {

// ===================================================================

class Feature PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.Feature) */ {
 public:
  inline Feature() : Feature(nullptr) {}
  virtual ~Feature();

  Feature(const Feature& from);
  Feature(Feature&& from) noexcept
    : Feature() {
    *this = ::std::move(from);
  }

  inline Feature& operator=(const Feature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Feature& operator=(Feature&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Feature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Feature* internal_default_instance() {
    return reinterpret_cast<const Feature*>(
               &_Feature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Feature& a, Feature& b) {
    a.Swap(&b);
  }
  inline void Swap(Feature* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Feature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Feature* New() const final {
    return CreateMaybeMessage<Feature>(nullptr);
  }

  Feature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Feature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Feature& from);
  void MergeFrom(const Feature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Feature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.Feature";
  }
  protected:
  explicit Feature(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FooGroup_2eproto);
    return ::descriptor_table_FooGroup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string val = 2;
  void clear_val();
  const std::string& val() const;
  void set_val(const std::string& value);
  void set_val(std::string&& value);
  void set_val(const char* value);
  void set_val(const char* value, size_t size);
  std::string* mutable_val();
  std::string* release_val();
  void set_allocated_val(std::string* val);
  private:
  const std::string& _internal_val() const;
  void _internal_set_val(const std::string& value);
  std::string* _internal_mutable_val();
  public:

  // @@protoc_insertion_point(class_scope:tutorial.Feature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FooGroup_2eproto;
};
// -------------------------------------------------------------------

class FooGroup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.FooGroup) */ {
 public:
  inline FooGroup() : FooGroup(nullptr) {}
  virtual ~FooGroup();

  FooGroup(const FooGroup& from);
  FooGroup(FooGroup&& from) noexcept
    : FooGroup() {
    *this = ::std::move(from);
  }

  inline FooGroup& operator=(const FooGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline FooGroup& operator=(FooGroup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FooGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FooGroup* internal_default_instance() {
    return reinterpret_cast<const FooGroup*>(
               &_FooGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FooGroup& a, FooGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(FooGroup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FooGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FooGroup* New() const final {
    return CreateMaybeMessage<FooGroup>(nullptr);
  }

  FooGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FooGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FooGroup& from);
  void MergeFrom(const FooGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FooGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.FooGroup";
  }
  protected:
  explicit FooGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FooGroup_2eproto);
    return ::descriptor_table_FooGroup_2eproto.file_level_metadata[kIndexInFileMessages];
		FooGroup foo_group;
		foo_group.
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFooFieldNumber = 1,
    kBarFieldNumber = 2,
    kBazFieldNumber = 3,
  };
  // .tutorial.Feature foo = 1;
  bool has_foo() const;
  private:
  bool _internal_has_foo() const;
  public:
  void clear_foo();
  const ::tutorial::Feature& foo() const;
  ::tutorial::Feature* release_foo();
  ::tutorial::Feature* mutable_foo();
  void set_allocated_mutable_foo()->foo(::tutorial::Feature* foo);
  private:
  const ::tutorial::Feature& _internal_foo() const;
  ::tutorial::Feature* _internal_mutable_foo();
  public:
  void unsafe_arena_set_allocated_foo(
      ::tutorial::Feature* foo);
  ::tutorial::Feature* unsafe_arena_release_foo();

  // .tutorial.Feature bar = 2;
  bool has_bar() const;
  private:
  bool _internal_has_bar() const;
  public:
  void clear_bar();
  const ::tutorial::Feature& bar() const;
  ::tutorial::Feature* release_bar();
  ::tutorial::Feature* mutable_bar();
  void set_allocated_bar(::tutorial::Feature* bar);
  private:
  const ::tutorial::Feature& _internal_bar() const;
  ::tutorial::Feature* _internal_mutable_bar();
  public:
  void unsafe_arena_set_allocated_bar(
      ::tutorial::Feature* bar);
  ::tutorial::Feature* unsafe_arena_release_bar();

  // .tutorial.Feature baz = 3;
  bool has_baz() const;
  private:
  bool _internal_has_baz() const;
  public:
  void clear_baz();
  const ::tutorial::Feature& baz() const;
  ::tutorial::Feature* release_baz();
  ::tutorial::Feature* mutable_baz();
  void set_allocated_baz(::tutorial::Feature* baz);
  private:
  const ::tutorial::Feature& _internal_baz() const;
  ::tutorial::Feature* _internal_mutable_baz();
  public:
  void unsafe_arena_set_allocated_baz(
      ::tutorial::Feature* baz);
  ::tutorial::Feature* unsafe_arena_release_baz();

  // @@protoc_insertion_point(class_scope:tutorial.FooGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tutorial::Feature* foo_;
  ::tutorial::Feature* bar_;
  ::tutorial::Feature* baz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FooGroup_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Feature

// string key = 1;
inline void Feature::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Feature::key() const {
  // @@protoc_insertion_point(field_get:tutorial.Feature.key)
  return _internal_key();
}
inline void Feature::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:tutorial.Feature.key)
}
inline std::string* Feature::mutable_key() {
  // @@protoc_insertion_point(field_mutable:tutorial.Feature.key)
  return _internal_mutable_key();
}
inline const std::string& Feature::_internal_key() const {
  return key_.Get();
}
inline void Feature::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Feature::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Feature.key)
}
inline void Feature::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tutorial.Feature.key)
}
inline void Feature::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tutorial.Feature.key)
}
inline std::string* Feature::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Feature::release_key() {
  // @@protoc_insertion_point(field_release:tutorial.Feature.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Feature::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tutorial.Feature.key)
}

// string val = 2;
inline void Feature::clear_val() {
  val_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Feature::val() const {
  // @@protoc_insertion_point(field_get:tutorial.Feature.val)
  return _internal_val();
}
inline void Feature::set_val(const std::string& value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:tutorial.Feature.val)
}
inline std::string* Feature::mutable_val() {
  // @@protoc_insertion_point(field_mutable:tutorial.Feature.val)
  return _internal_mutable_val();
}
inline const std::string& Feature::_internal_val() const {
  return val_.Get();
}
inline void Feature::_internal_set_val(const std::string& value) {
  
  val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Feature::set_val(std::string&& value) {
  
  val_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Feature.val)
}
inline void Feature::set_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tutorial.Feature.val)
}
inline void Feature::set_val(const char* value,
    size_t size) {
  
  val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tutorial.Feature.val)
}
inline std::string* Feature::_internal_mutable_val() {
  
  return val_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Feature::release_val() {
  // @@protoc_insertion_point(field_release:tutorial.Feature.val)
  return val_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Feature::set_allocated_val(std::string* val) {
  if (val != nullptr) {
    
  } else {
    
  }
  val_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), val,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tutorial.Feature.val)
}

// -------------------------------------------------------------------

// FooGroup

// .tutorial.Feature foo = 1;
inline bool FooGroup::_internal_has_foo() const {
  return this != internal_default_instance() && foo_ != nullptr;
}
inline bool FooGroup::has_foo() const {
  return _internal_has_foo();
}
inline void FooGroup::clear_foo() {
  if (GetArena() == nullptr && foo_ != nullptr) {
    delete foo_;
  }
  foo_ = nullptr;
}
inline const ::tutorial::Feature& FooGroup::_internal_foo() const {
  const ::tutorial::Feature* p = foo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tutorial::Feature*>(
      &::tutorial::_Feature_default_instance_);
}
inline const ::tutorial::Feature& FooGroup::foo() const {
  // @@protoc_insertion_point(field_get:tutorial.FooGroup.foo)
  return _internal_foo();
}
inline void FooGroup::unsafe_arena_set_allocated_foo(
    ::tutorial::Feature* foo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(foo_);
  }
  foo_ = foo;
  if (foo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tutorial.FooGroup.foo)
}
inline ::tutorial::Feature* FooGroup::release_foo() {
  
  ::tutorial::Feature* temp = foo_;
  foo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tutorial::Feature* FooGroup::unsafe_arena_release_foo() {
  // @@protoc_insertion_point(field_release:tutorial.FooGroup.foo)
  
  ::tutorial::Feature* temp = foo_;
  foo_ = nullptr;
  return temp;
}
inline ::tutorial::Feature* FooGroup::_internal_mutable_foo() {
  
  if (foo_ == nullptr) {
    auto* p = CreateMaybeMessage<::tutorial::Feature>(GetArena());
    foo_ = p;
  }
  return foo_;
}
inline ::tutorial::Feature* FooGroup::mutable_foo() {
  // @@protoc_insertion_point(field_mutable:tutorial.FooGroup.foo)
  return _internal_mutable_foo();
}
inline void FooGroup::set_allocated_foo(::tutorial::Feature* foo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete foo_;
  }
  if (foo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(foo);
    if (message_arena != submessage_arena) {
      foo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foo, submessage_arena);
    }
    
  } else {
    
  }
  foo_ = foo;
  // @@protoc_insertion_point(field_set_allocated:tutorial.FooGroup.foo)
}

// .tutorial.Feature bar = 2;
inline bool FooGroup::_internal_has_bar() const {
  return this != internal_default_instance() && bar_ != nullptr;
}
inline bool FooGroup::has_bar() const {
  return _internal_has_bar();
}
inline void FooGroup::clear_bar() {
  if (GetArena() == nullptr && bar_ != nullptr) {
    delete bar_;
  }
  bar_ = nullptr;
}
inline const ::tutorial::Feature& FooGroup::_internal_bar() const {
  const ::tutorial::Feature* p = bar_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tutorial::Feature*>(
      &::tutorial::_Feature_default_instance_);
}
inline const ::tutorial::Feature& FooGroup::bar() const {
  // @@protoc_insertion_point(field_get:tutorial.FooGroup.bar)
  return _internal_bar();
}
inline void FooGroup::unsafe_arena_set_allocated_bar(
    ::tutorial::Feature* bar) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bar_);
  }
  bar_ = bar;
  if (bar) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tutorial.FooGroup.bar)
}
inline ::tutorial::Feature* FooGroup::release_bar() {
  
  ::tutorial::Feature* temp = bar_;
  bar_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tutorial::Feature* FooGroup::unsafe_arena_release_bar() {
  // @@protoc_insertion_point(field_release:tutorial.FooGroup.bar)
  
  ::tutorial::Feature* temp = bar_;
  bar_ = nullptr;
  return temp;
}
inline ::tutorial::Feature* FooGroup::_internal_mutable_bar() {
  
  if (bar_ == nullptr) {
    auto* p = CreateMaybeMessage<::tutorial::Feature>(GetArena());
    bar_ = p;
  }
  return bar_;
}
inline ::tutorial::Feature* FooGroup::mutable_bar() {
  // @@protoc_insertion_point(field_mutable:tutorial.FooGroup.bar)
  return _internal_mutable_bar();
}
inline void FooGroup::set_allocated_bar(::tutorial::Feature* bar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bar_;
  }
  if (bar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bar);
    if (message_arena != submessage_arena) {
      bar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bar, submessage_arena);
    }
    
  } else {
    
  }
  bar_ = bar;
  // @@protoc_insertion_point(field_set_allocated:tutorial.FooGroup.bar)
}

// .tutorial.Feature baz = 3;
inline bool FooGroup::_internal_has_baz() const {
  return this != internal_default_instance() && baz_ != nullptr;
}
inline bool FooGroup::has_baz() const {
  return _internal_has_baz();
}
inline void FooGroup::clear_baz() {
  if (GetArena() == nullptr && baz_ != nullptr) {
    delete baz_;
  }
  baz_ = nullptr;
}
inline const ::tutorial::Feature& FooGroup::_internal_baz() const {
  const ::tutorial::Feature* p = baz_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tutorial::Feature*>(
      &::tutorial::_Feature_default_instance_);
}
inline const ::tutorial::Feature& FooGroup::baz() const {
  // @@protoc_insertion_point(field_get:tutorial.FooGroup.baz)
  return _internal_baz();
}
inline void FooGroup::unsafe_arena_set_allocated_baz(
    ::tutorial::Feature* baz) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(baz_);
  }
  baz_ = baz;
  if (baz) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tutorial.FooGroup.baz)
}
inline ::tutorial::Feature* FooGroup::release_baz() {
  
  ::tutorial::Feature* temp = baz_;
  baz_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tutorial::Feature* FooGroup::unsafe_arena_release_baz() {
  // @@protoc_insertion_point(field_release:tutorial.FooGroup.baz)
  
  ::tutorial::Feature* temp = baz_;
  baz_ = nullptr;
  return temp;
}
inline ::tutorial::Feature* FooGroup::_internal_mutable_baz() {
  
  if (baz_ == nullptr) {
    auto* p = CreateMaybeMessage<::tutorial::Feature>(GetArena());
    baz_ = p;
  }
  return baz_;
}
inline ::tutorial::Feature* FooGroup::mutable_baz() {
  // @@protoc_insertion_point(field_mutable:tutorial.FooGroup.baz)
  return _internal_mutable_baz();
}
inline void FooGroup::set_allocated_baz(::tutorial::Feature* baz) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete baz_;
  }
  if (baz) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(baz);
    if (message_arena != submessage_arena) {
      baz = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, baz, submessage_arena);
    }
    
  } else {
    
  }
  baz_ = baz;
  // @@protoc_insertion_point(field_set_allocated:tutorial.FooGroup.baz)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FooGroup_2eproto
